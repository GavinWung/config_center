application.name=avatar.play
spring.profiles.active=@profiles.active@
#server.context-path=/@build.finalName@
#读取外置logback.xml文件
avatar.play.application.fileExtrapositionWay=true
#ribbon client 注册
#avatar.play.application.ribbonClientNames=horus-zuul-server,avatar-play-service-provider
avatar.play.application.ribbonClientNames=horus-zuul-server
#ribbon负载均衡策略配置
avatar.play.application.ribbonRuleName=ZoneAvoidanceRule

eureka.client.registerWithEureka=true
eureka.client.healthcheck.enabled =true
eureka.instance.prefer-ip-address = true
spring.cloud.config.discovery.enabled=true

#使用外置properties时使用以下配置替代spring.application.name
#eureka.instance.appname=avatar.play-service-client
#eureka.instance.virtualHostName=avatar.play-service-client
#eureka.instance.secureVirtualHostName=avatar.play-service-client
#根据具体工程配置替换avatar.play，如 paperless-sign-service-provider
eureka.instance.appname=avatar-play-service-provider
eureka.instance.virtualHostName=avatar-play-service-provider
eureka.instance.secureVirtualHostName=avatar-play-service-provider
#eureka节点定时续约时间
eureka.instance.leaseRenewalIntervalInSeconds=15
#eureka节点剔除时间
eureka.instance.leaseExpirationDurationInSeconds=45
#从注册中心获取注册信息的时间间隔
eureka.client.registryFetchIntervalSeconds=1

#根据具体工程配置替换avatar.play，如 paperless-sign-service-provider-peer
#eureka.instance.instance-id=${spring.cloud.client.ipAddress}:service-client:${server.port}
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:avatar-play-service-provider-peer:${server.port}

#feign.hystrix.enabled=false
#hystrix.command.default.execution.timeout.enabled=false
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
#熔断配置
#熔断窗口时间的标本数量
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=3
#熔断时间
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=20000
#容器窗口的错误占比，百分制
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
#熔断窗口时间
#hystrix.command.default.metrics.rollingStats.timeInMilliseconds=10000
#hystrix窗口期内监控上报的并发上限
#hystrix.command.default.metrics.rollingPercentile.bucketSize=100

#重试机制
#重试机制开启为true，关闭为false
#spring.cloud.loadbalancer.retry.enabled=true
#建立连接超时时间
#avatar-play-service-provider.ribbon.ConnectTimeout=1000
#连接超时时间
#avatar-play-service-provider.ribbon.ReadTimeout=10000
#所有操作都重试
#avatar-play-service-provider.ribbon.OkToRetryOnAllOperations=true
#重试发生，更换节点数最大值
#avatar-play-service-provider.ribbon.MaxAutoRetriesNextServer=10
#单个节点重试最大值
#avatar-play-service-provider.ribbon.MaxAutoRetries=1

#undertow并发配置
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=19
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=2048
# 是否分配的直接内存
server.undertow.direct-buffers=true
#最大分区数量
server.undertow.max-regions=10
server.undertow.always-set-keep-alive=true

#Http RestTemplate配置
rest.template.readTimeout=300000
rest.template.connectTimeout=300000

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# jvm监控 开关 阈值
#jvm.monitor.open=true
#jvm.monitor.critical=20%

# 线程监控 开关 阈值
#thread.monitor.open=true
#thread.monitor.critical=100

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

spring.http.multipart.maxFileSize=100Mb
spring.http.multipart.maxRequestSize=500Mb